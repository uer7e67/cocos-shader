{
  "ver": "1.0.25",
  "uuid": "c7b825f5-7a53-4e13-b750-e7747b611219",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mediump mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n#if USE_LIGHT\n  uniform vec2 point;\nuniform float radius;\nuniform float bgAlpha;\nuniform float whRatio;\n  void mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec4 bgColor = vec4(0.0, 0.0, 0.0, 0.0);\n    vec4 centerColor = vec4(0.0, 0.0, 0.0, 0.0);\n    float bgFinalpha = bgAlpha;\n    float circle2 = radius*radius;\n    float rx = point.x;\n    float ry = point.y * whRatio;\n    float dir2 = (v_uv0.x - rx) *(v_uv0.x - rx) + (v_uv0.y * whRatio - ry)*(v_uv0.y * whRatio - ry);\n    if(dir2 >= circle2){\n        bgColor = vec4(0.0, 0.0, 0.0, bgFinalpha);\n    }\n    else{\n        float a = dir2 / circle2;\n        if(a < bgFinalpha) {\n          bgFinalpha = a;\n        }\n        bgColor = vec4(0.0, 0.0, 0.0, bgFinalpha);\n        bgColor += centerColor;\n    }\n    fragColor = bgColor;\n  }\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n  #if USE_LIGHT\n  mainImage(gl_FragColor, gl_FragCoord.xy);\n  #endif\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_nativeSize;\n  highp   mat4 cc_matView;\n  mediump mat4 cc_matViewInv;\n  mediump mat4 cc_matProj;\n  mediump mat4 cc_matProjInv;\n  mediump mat4 cc_matViewProj;\n  mediump mat4 cc_matViewProjInv;\n  mediump vec4 cc_cameraPos;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n#if USE_LIGHT\n  uniform LIGHT {\n    vec2 point;\n    float radius;\n    float bgAlpha;\n    float whRatio;\n  };\n  void mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec4 bgColor = vec4(0.0, 0.0, 0.0, 0.0);\n    vec4 centerColor = vec4(0.0, 0.0, 0.0, 0.0);\n    float bgFinalpha = bgAlpha;\n    float circle2 = radius*radius;\n    float rx = point.x;\n    float ry = point.y * whRatio;\n    float dir2 = (v_uv0.x - rx) *(v_uv0.x - rx) + (v_uv0.y * whRatio - ry)*(v_uv0.y * whRatio - ry);\n    if(dir2 >= circle2){\n        bgColor = vec4(0.0, 0.0, 0.0, bgFinalpha);\n    }\n    else{\n        float a = dir2 / circle2;\n        if(a < bgFinalpha) {\n          bgFinalpha = a;\n        }\n        bgColor = vec4(0.0, 0.0, 0.0, bgFinalpha);\n        bgColor += centerColor;\n    }\n    fragColor = bgColor;\n  }\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n  #if USE_LIGHT\n  mainImage(gl_FragColor, gl_FragCoord.xy);\n  #endif\n}"
      }
    }
  ],
  "subMetas": {}
}