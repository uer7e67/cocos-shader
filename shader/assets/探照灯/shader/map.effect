// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }

        whRatio: {
          value: 1.0,
          editor: {
            tooltip: "横纵比"
          },
        }
 
        radius: { 
          value: 0.1,
          editor: {
            tooltip: "半径" 
          }
        }
        point: {
          value: [0.2, 0.2],
          editor: {
            tooltip: "扩散起点坐标" 
          }
        }

        bgAlpha: {
          value: 0.8, 
          editor: {
            tooltip: "背景透明度" 
          }
        }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>

  in vec4 v_color;
  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  #if USE_LIGHT

    uniform LIGHT {
      vec2 point;    // 中心点
      float radius;  // 半径 
      float bgAlpha; // bg 透明度
      float whRatio;    
    };

    void mainImage( out vec4 fragColor, in vec2 fragCoord ) {
      vec4 bgColor = vec4(0.0, 0.0, 0.0, 0.0);
      vec4 centerColor = vec4(0.0, 0.0, 0.0, 0.0);
      float bgFinalpha = bgAlpha;

      // 计算圆半径平方
      float circle2 = radius*radius;
  
      // 计算0点到圆位置的平方
      float rx = point.x;
      float ry = point.y * whRatio;
      float dir2 = (v_uv0.x - rx) *(v_uv0.x - rx) + (v_uv0.y * whRatio - ry)*(v_uv0.y * whRatio - ry);

      if(dir2 >= circle2){  // 圈外颜色
          bgColor = vec4(0.0, 0.0, 0.0, bgFinalpha);
      }
      else{               // 圈内颜色
          float a = dir2 / circle2;
          if(a < bgFinalpha) {
            bgFinalpha = a;
          }
          bgColor = vec4(0.0, 0.0, 0.0, bgFinalpha);
          bgColor += centerColor; 
      }
      fragColor = bgColor;
    }

  #endif

  void main () {
    vec4 o = vec4(1, 1, 1, 1);
    o *= v_color;
    ALPHA_TEST(o);
    gl_FragColor = o;

    #if USE_LIGHT 
    mainImage(gl_FragColor, gl_FragCoord.xy);
    #endif
  }
}%
